/* Grundsätzlich ist es wichtig auch bei CSS eine gewisse "Architektur" einzuhalten, weil man sonst den Überblick und die Kontrolle verliert. */
/* Früher tendierte man dazu alles in eine große Datei zu packen. Das war die Hölle, was Pflege angeht. Deswegen sollte man sich mit CSS-Architektur beschäftigen, z.B. https://snipcart.com/blog/organize-css-modular-architecture. */
/* Jetzt gibt es z.B. Angular, wo man auch Komponentenweise CSS erstellt. Das ist besser, aber natürlich gibt es auch noch übergreifendes CSS. Siehe dafür https://angular.io/guide/component-styles, https://medium.com/@kmathy/angular-tips-and-tricks-for-css-structure-cb73fa50f0e8 (keine Ahnung ob das so roichtig ist, aber klingt gut) oder https://www.infoq.com/news/2019/12/components-css-architecture/ */
/* Außerdem hat man jetzt mit SASS oder SCSS mehr Möglichkeiten. Im Zweifel würde ich reines CSS gar nicht mehr einsetzen. Siehe https://www.pluralsight.com/guides/use-sass-less-or-css-within-your-angular-component-template */

/* Um es simpel und konkret zu machen, würde ich die CSS folgendermaßen aufbauen:

Global, z.B. Font

:host {}
body {}

Elemente, z.B. h1, h2 und ggf. ihre Ableitungen mit Klassen, z.B.:

button {}
button:hover {}
button.clear {}
...

Komponenten, z.B. .display und alle Elemente dort drin

.display {}
.display .last {}
.display .current {}
.display button {} // z.B.

*/


/* Die beiden könnte man zusammenfassen. Außerdem würde ich versuchen Farben einheiltich mit Hex-Werten (z.B. #000000) darzustellen und  nicht zu mischen. */


h2 {
    color: var(--text-color);
}

h5 {
    color: var(--text-color);
}

.nav {
    background-color: var(--nav-color);
    width: 100%;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: space-around;
}

p {
    display: inline-block;
    margin: 20px;
    color: var(--txt-color);
}

/* Mach dich Mal schlau bei den Maßeinheiten. Du verwendest absolute (px) und relative Werte (vh, %). Tendenziell geht die Empfehlung hin zu relativen WErten, vor allem wg Responsive-Design. */


section {
    height: 93.41vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--bkg-color);
}

.theme {
    width: 60px;
    height: 35px;
    font-size: 12px;
    border-radius: 10px;
    font-weight: bold;
    background-color: var(--btn-bg-color);
    border-color: var(--btn-border-color);
}

button {
    width: 90px;
    height: 70px;
    /* Mit SASS oder SCSS kannst du Variablen definieren für so was und die wiederverwenden. */

    background-color: var(--btn-bg-color);
    color: var(--btn-txt-color);
    font-size: 3vh;
    border: 1px solid var(--btn-border-color);

}

button:hover {
    background: var(--btn-hover);
}

button:active {
    background: var(--btn-click);
}

/* Hier könntest du auch button.clear verwenden, als <button class=clear>... Das ist eleganter. */

.clearbutton {
    width: 180px;
    border-top-left-radius: 10px;
}

.deletebutton {
    width: 180px;
    border-top-right-radius: 10px;
}

/* Man tendiert dazu Klassen semantisch zu benennen und nicht nach ihren Werten, weil die sich ändern können. Das Bsp passt hier vllt nicht, aber z.B. bei einem Button wäre button.main besser als button.blue, falls sich die Farbe Mal ändert. */

.bottomright {
    border-bottom-right-radius: 10px;
}

.bottomleft {
    border-bottom-left-radius: 10px;
}

/* Div ist sehr allgemein. Würde man so nicht machen. */

div {
    width: 360px;
    background-color: var(--div-color);
}

/* Hier hast du Dublikate, die du mit .display und display.small verhindern könntest. Oder halt mit Verschachtelung, wenn du SASS/SCSS nutzt. */

.display {
    width: 360px;
    height: 50px;
    background-color: var(--disp-color);
    display: flex;
    border: 1px solid var(--btn-border-color);
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 10px;
    border-top: none;
}

.displaySmall {
    width: 360px;
    height: 50px;
    background-color: var(--disp-color);
    display: flex;
    border: 1px solid var(--btn-border-color);
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    border-bottom: none;

}

.borderall {
    border: 20px solid var(--div-color);
    border-radius: 25px;
}

.borderdisplay {
    border-bottom: 20px solid var(--div-color);
}